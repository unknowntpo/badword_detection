/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
	alias(libs.plugins.avro)
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)

    implementation(libs.flink.java)
    implementation(libs.flink.streaming.java)
    implementation(libs.flink.clients)
    implementation(libs.flink.avro)

    testImplementation(libs.flink.test.utils)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.Wordcount"
}

tasks.named<Test>("test") {
	dependsOn("generateTestAvroJava")
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    jvmArgs(project.extra["extraJvmArgs"] as List<*>)
}

project.extra["extraJvmArgs"] = if (java.toolchain.languageVersion.get().asInt() < 17) {
    listOf()
} else {
    listOf(
        "--add-opens=java.base/java.util=ALL-UNNAMED",
        // Include other necessary opens
//        "--add-opens=java.base/java.lang=ALL-UNNAMED"
    )
}

tasks.register<com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask>("generateAvroSchema") {
    source("src/main/avro")
    setOutputDir(file("build/generated-main-avro-java"))
}

tasks.named("compileJava") {
    dependsOn("generateAvroSchema")
}
